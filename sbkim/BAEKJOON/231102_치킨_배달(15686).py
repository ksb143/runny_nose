# 크기가 N×N인 도시가 있다. 도시는 1×1크기의 칸으로 나누어져 있다. 도시의 각 칸은 빈 칸, 치킨집, 집 중 하나이다.
# 도시의 칸은 (r, c)와 같은 형태로 나타내고, r행 c열 또는 위에서부터 r번째 칸, 왼쪽에서부터 c번째 칸을 의미한다.
# r과 c는 1부터 시작한다.

# 치킨 거리는 집과 가장 가까운 치킨집 사이의 거리이다.
# 즉, 치킨 거리는 집을 기준으로 정해지며, 각각의 집은 치킨 거리를 가지고 있다.
# 도시의 치킨 거리는 모든 집의 치킨 거리의 합이다.

# 임의의 두 칸 (r1, c1)과 (r2, c2) 사이의 거리는 |r1-r2| + |c1-c2|로 구한다.

# 이 도시에서 가장 수익을 많이 낼 수 있는  치킨집의 개수는 최대 M개라는 사실을 알아내었다.
# 도시에 있는 치킨집 중에서 최대 M개를 고르고, 나머지 치킨집은 모두 폐업시켜야 한다.
# 어떻게 고르면, 도시의 치킨 거리가 가장 작게 될지 구하는 프로그램을 작성하시오.

# 첫째 줄에 폐업시키지 않을 치킨집을 최대 M개를 골랐을 때, 도시의 치킨 거리의 최솟값을 출력한다.

# (문제 풀이) 치킨 집 M개를 고르고 그 중에서 치킨 거리가 최소인 값을 출력

# 도시 크기 N, 최대 수익 치킨집 개수
N, M = map(int, input().split())

# 도시의 정보 -> 0 빈집, 1 집, 2 치킨집
city = list(map(int, input().split()) for _ in range(N))

chickens = []
house = []
for r in range(N):
    for c in range(N):
        # 치킨 집 다 넣기
        if city[r][c] == 2:
            chickens.append((r, c))
        elif

